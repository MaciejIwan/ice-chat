//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.9
//
// <auto-generated>
//
// Generated from file `Chat.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef __Chat_h__
#define __Chat_h__

#include <IceUtil/PushDisableWarnings.h>
#include <Ice/ProxyF.h>
#include <Ice/ObjectF.h>
#include <Ice/ValueF.h>
#include <Ice/Exception.h>
#include <Ice/LocalObject.h>
#include <Ice/StreamHelpers.h>
#include <Ice/Comparable.h>
#include <Ice/Proxy.h>
#include <Ice/Object.h>
#include <Ice/GCObject.h>
#include <Ice/Value.h>
#include <Ice/Incoming.h>
#include <Ice/FactoryTableInit.h>
#include <IceUtil/ScopedArray.h>
#include <Ice/Optional.h>
#include <Ice/ExceptionHelpers.h>
#include <IceUtil/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 307
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 >= 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 9
#       error Ice patch level mismatch!
#   endif
#endif

#ifdef ICE_CPP11_MAPPING // C++11 mapping

namespace Chat
{

class Room;
class RoomPrx;
class User;
class UserPrx;
class RoomFactory;
class RoomFactoryPrx;
class Lobby;
class LobbyPrx;

}

namespace Chat
{

class AccessDenied : public ::Ice::UserExceptionHelper<AccessDenied, ::Ice::UserException>
{
public:

    virtual ~AccessDenied();

    AccessDenied(const AccessDenied&) = default;

    AccessDenied() = default;

    /**
     * Obtains a tuple containing all of the exception's data members.
     * @return The data members in a tuple.
     */
    std::tuple<> ice_tuple() const
    {
        return std::tie();
    }

    /**
     * Obtains the Slice type ID of this exception.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();
};

/// \cond INTERNAL
static AccessDenied _iceS_AccessDenied_init;
/// \endcond

class UserExists : public ::Ice::UserExceptionHelper<UserExists, ::Ice::UserException>
{
public:

    virtual ~UserExists();

    UserExists(const UserExists&) = default;

    UserExists() = default;

    /**
     * Obtains a tuple containing all of the exception's data members.
     * @return The data members in a tuple.
     */
    std::tuple<> ice_tuple() const
    {
        return std::tie();
    }

    /**
     * Obtains the Slice type ID of this exception.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();
};

class RoomExists : public ::Ice::UserExceptionHelper<RoomExists, ::Ice::UserException>
{
public:

    virtual ~RoomExists();

    RoomExists(const RoomExists&) = default;

    RoomExists() = default;

    /**
     * Obtains a tuple containing all of the exception's data members.
     * @return The data members in a tuple.
     */
    std::tuple<> ice_tuple() const
    {
        return std::tie();
    }

    /**
     * Obtains the Slice type ID of this exception.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();
};

class RoomFactoryExists : public ::Ice::UserExceptionHelper<RoomFactoryExists, ::Ice::UserException>
{
public:

    virtual ~RoomFactoryExists();

    RoomFactoryExists(const RoomFactoryExists&) = default;

    RoomFactoryExists() = default;

    /**
     * Obtains a tuple containing all of the exception's data members.
     * @return The data members in a tuple.
     */
    std::tuple<> ice_tuple() const
    {
        return std::tie();
    }

    /**
     * Obtains the Slice type ID of this exception.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();
};

class NoSuchFactory : public ::Ice::UserExceptionHelper<NoSuchFactory, ::Ice::UserException>
{
public:

    virtual ~NoSuchFactory();

    NoSuchFactory(const NoSuchFactory&) = default;

    NoSuchFactory() = default;

    /**
     * Obtains a tuple containing all of the exception's data members.
     * @return The data members in a tuple.
     */
    std::tuple<> ice_tuple() const
    {
        return std::tie();
    }

    /**
     * Obtains the Slice type ID of this exception.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();
};

enum class UserStatus : unsigned char
{
    Online,
    Offline,
    BeBack
};

using Rooms = ::std::vector<::std::shared_ptr<RoomPrx>>;

using Users = ::std::vector<::std::shared_ptr<UserPrx>>;

}

namespace Chat
{

class Lobby : public virtual ::Ice::Object
{
public:

    using ProxyType = LobbyPrx;

    /**
     * Determines whether this object supports an interface with the given Slice type ID.
     * @param id The fully-scoped Slice type ID.
     * @param current The Current object for the invocation.
     * @return True if this object supports the interface, false, otherwise.
     */
    virtual bool ice_isA(::std::string id, const ::Ice::Current& current) const override;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    virtual ::std::vector<::std::string> ice_ids(const ::Ice::Current& current) const override;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    virtual ::std::string ice_id(const ::Ice::Current& current) const override;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    virtual void _cpp_register(::std::shared_ptr<UserPrx> user, ::std::string password, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_register(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void login(::std::shared_ptr<UserPrx> user, ::std::string password, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_login(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void logout(const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_logout(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual Rooms getRooms(const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_getRooms(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual ::std::shared_ptr<RoomPrx> createRoom(::std::string name, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_createRoom(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual ::std::shared_ptr<RoomPrx> findRoom(::std::string name, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_findRoom(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual Users ListUsers(const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_ListUsers(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void RegisterRoomFactory(::std::shared_ptr<RoomFactoryPrx> factory, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_RegisterRoomFactory(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void UnregisterRoomFactory(::std::shared_ptr<RoomFactoryPrx> factory, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_UnregisterRoomFactory(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /// \cond INTERNAL
    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&) override;
    /// \endcond
};

class User : public virtual ::Ice::Object
{
public:

    using ProxyType = UserPrx;

    /**
     * Determines whether this object supports an interface with the given Slice type ID.
     * @param id The fully-scoped Slice type ID.
     * @param current The Current object for the invocation.
     * @return True if this object supports the interface, false, otherwise.
     */
    virtual bool ice_isA(::std::string id, const ::Ice::Current& current) const override;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    virtual ::std::vector<::std::string> ice_ids(const ::Ice::Current& current) const override;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    virtual ::std::string ice_id(const ::Ice::Current& current) const override;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    virtual void sendMessage(::std::shared_ptr<RoomPrx> room, ::std::shared_ptr<UserPrx> user, ::std::string message, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_sendMessage(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void sendPrivateMessage(::std::shared_ptr<UserPrx> user, ::std::string message, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_sendPrivateMessage(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual ::std::string getName(const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_getName(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual UserStatus getStatus(const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_getStatus(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /// \cond INTERNAL
    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&) override;
    /// \endcond
};

class Room : public virtual ::Ice::Object
{
public:

    using ProxyType = RoomPrx;

    /**
     * Determines whether this object supports an interface with the given Slice type ID.
     * @param id The fully-scoped Slice type ID.
     * @param current The Current object for the invocation.
     * @return True if this object supports the interface, false, otherwise.
     */
    virtual bool ice_isA(::std::string id, const ::Ice::Current& current) const override;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    virtual ::std::vector<::std::string> ice_ids(const ::Ice::Current& current) const override;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    virtual ::std::string ice_id(const ::Ice::Current& current) const override;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    virtual void join(::std::shared_ptr<UserPrx> user, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_join(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void sendMessage(::std::shared_ptr<UserPrx> user, ::std::string message, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_sendMessage(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void leave(::std::shared_ptr<UserPrx> user, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_leave(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual Users ListUsers(const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_ListUsers(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /// \cond INTERNAL
    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&) override;
    /// \endcond
};

class RoomFactory : public virtual ::Ice::Object
{
public:

    using ProxyType = RoomFactoryPrx;

    /**
     * Determines whether this object supports an interface with the given Slice type ID.
     * @param id The fully-scoped Slice type ID.
     * @param current The Current object for the invocation.
     * @return True if this object supports the interface, false, otherwise.
     */
    virtual bool ice_isA(::std::string id, const ::Ice::Current& current) const override;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    virtual ::std::vector<::std::string> ice_ids(const ::Ice::Current& current) const override;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    virtual ::std::string ice_id(const ::Ice::Current& current) const override;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    virtual ::std::shared_ptr<RoomPrx> createRoom(::std::string name, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_createRoom(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual double getServerLoad(const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_getServerLoad(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /// \cond INTERNAL
    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&) override;
    /// \endcond
};

}

namespace Chat
{

class LobbyPrx : public virtual ::Ice::Proxy<LobbyPrx, ::Ice::ObjectPrx>
{
public:

    void _cpp_register(const ::std::shared_ptr<UserPrx>& user, const ::std::string& password, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        _makePromiseOutgoing<void>(true, this, &LobbyPrx::_iceI_register, user, password, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto registerAsync(const ::std::shared_ptr<UserPrx>& user, const ::std::string& password, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<void>>().get_future())
    {
        return _makePromiseOutgoing<void, P>(false, this, &LobbyPrx::_iceI_register, user, password, context);
    }

    ::std::function<void()>
    registerAsync(const ::std::shared_ptr<UserPrx>& user, const ::std::string& password,
                  ::std::function<void()> response,
                  ::std::function<void(::std::exception_ptr)> ex = nullptr,
                  ::std::function<void(bool)> sent = nullptr,
                  const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<void>(std::move(response), std::move(ex), std::move(sent), this, &Chat::LobbyPrx::_iceI_register, user, password, context);
    }

    /// \cond INTERNAL
    void _iceI_register(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, const ::std::shared_ptr<UserPrx>&, const ::std::string&, const ::Ice::Context&);
    /// \endcond

    void login(const ::std::shared_ptr<UserPrx>& user, const ::std::string& password, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        _makePromiseOutgoing<void>(true, this, &LobbyPrx::_iceI_login, user, password, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto loginAsync(const ::std::shared_ptr<UserPrx>& user, const ::std::string& password, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<void>>().get_future())
    {
        return _makePromiseOutgoing<void, P>(false, this, &LobbyPrx::_iceI_login, user, password, context);
    }

    ::std::function<void()>
    loginAsync(const ::std::shared_ptr<UserPrx>& user, const ::std::string& password,
               ::std::function<void()> response,
               ::std::function<void(::std::exception_ptr)> ex = nullptr,
               ::std::function<void(bool)> sent = nullptr,
               const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<void>(std::move(response), std::move(ex), std::move(sent), this, &Chat::LobbyPrx::_iceI_login, user, password, context);
    }

    /// \cond INTERNAL
    void _iceI_login(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, const ::std::shared_ptr<UserPrx>&, const ::std::string&, const ::Ice::Context&);
    /// \endcond

    void logout(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        _makePromiseOutgoing<void>(true, this, &LobbyPrx::_iceI_logout, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto logoutAsync(const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<void>>().get_future())
    {
        return _makePromiseOutgoing<void, P>(false, this, &LobbyPrx::_iceI_logout, context);
    }

    ::std::function<void()>
    logoutAsync(::std::function<void()> response,
                ::std::function<void(::std::exception_ptr)> ex = nullptr,
                ::std::function<void(bool)> sent = nullptr,
                const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<void>(std::move(response), std::move(ex), std::move(sent), this, &Chat::LobbyPrx::_iceI_logout, context);
    }

    /// \cond INTERNAL
    void _iceI_logout(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, const ::Ice::Context&);
    /// \endcond

    Rooms getRooms(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makePromiseOutgoing<::Chat::Rooms>(true, this, &LobbyPrx::_iceI_getRooms, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto getRoomsAsync(const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<::Chat::Rooms>>().get_future())
    {
        return _makePromiseOutgoing<::Chat::Rooms, P>(false, this, &LobbyPrx::_iceI_getRooms, context);
    }

    ::std::function<void()>
    getRoomsAsync(::std::function<void(::Chat::Rooms)> response,
                  ::std::function<void(::std::exception_ptr)> ex = nullptr,
                  ::std::function<void(bool)> sent = nullptr,
                  const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<::Chat::Rooms>(std::move(response), std::move(ex), std::move(sent), this, &Chat::LobbyPrx::_iceI_getRooms, context);
    }

    /// \cond INTERNAL
    void _iceI_getRooms(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::Chat::Rooms>>&, const ::Ice::Context&);
    /// \endcond

    ::std::shared_ptr<RoomPrx> createRoom(const ::std::string& name, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makePromiseOutgoing<::std::shared_ptr<::Chat::RoomPrx>>(true, this, &LobbyPrx::_iceI_createRoom, name, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto createRoomAsync(const ::std::string& name, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<::std::shared_ptr<::Chat::RoomPrx>>>().get_future())
    {
        return _makePromiseOutgoing<::std::shared_ptr<::Chat::RoomPrx>, P>(false, this, &LobbyPrx::_iceI_createRoom, name, context);
    }

    ::std::function<void()>
    createRoomAsync(const ::std::string& name,
                    ::std::function<void(::std::shared_ptr<::Chat::RoomPrx>)> response,
                    ::std::function<void(::std::exception_ptr)> ex = nullptr,
                    ::std::function<void(bool)> sent = nullptr,
                    const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<::std::shared_ptr<::Chat::RoomPrx>>(std::move(response), std::move(ex), std::move(sent), this, &Chat::LobbyPrx::_iceI_createRoom, name, context);
    }

    /// \cond INTERNAL
    void _iceI_createRoom(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::shared_ptr<::Chat::RoomPrx>>>&, const ::std::string&, const ::Ice::Context&);
    /// \endcond

    ::std::shared_ptr<RoomPrx> findRoom(const ::std::string& name, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makePromiseOutgoing<::std::shared_ptr<::Chat::RoomPrx>>(true, this, &LobbyPrx::_iceI_findRoom, name, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto findRoomAsync(const ::std::string& name, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<::std::shared_ptr<::Chat::RoomPrx>>>().get_future())
    {
        return _makePromiseOutgoing<::std::shared_ptr<::Chat::RoomPrx>, P>(false, this, &LobbyPrx::_iceI_findRoom, name, context);
    }

    ::std::function<void()>
    findRoomAsync(const ::std::string& name,
                  ::std::function<void(::std::shared_ptr<::Chat::RoomPrx>)> response,
                  ::std::function<void(::std::exception_ptr)> ex = nullptr,
                  ::std::function<void(bool)> sent = nullptr,
                  const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<::std::shared_ptr<::Chat::RoomPrx>>(std::move(response), std::move(ex), std::move(sent), this, &Chat::LobbyPrx::_iceI_findRoom, name, context);
    }

    /// \cond INTERNAL
    void _iceI_findRoom(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::shared_ptr<::Chat::RoomPrx>>>&, const ::std::string&, const ::Ice::Context&);
    /// \endcond

    Users ListUsers(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makePromiseOutgoing<::Chat::Users>(true, this, &LobbyPrx::_iceI_ListUsers, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto ListUsersAsync(const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<::Chat::Users>>().get_future())
    {
        return _makePromiseOutgoing<::Chat::Users, P>(false, this, &LobbyPrx::_iceI_ListUsers, context);
    }

    ::std::function<void()>
    ListUsersAsync(::std::function<void(::Chat::Users)> response,
                   ::std::function<void(::std::exception_ptr)> ex = nullptr,
                   ::std::function<void(bool)> sent = nullptr,
                   const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<::Chat::Users>(std::move(response), std::move(ex), std::move(sent), this, &Chat::LobbyPrx::_iceI_ListUsers, context);
    }

    /// \cond INTERNAL
    void _iceI_ListUsers(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::Chat::Users>>&, const ::Ice::Context&);
    /// \endcond

    void RegisterRoomFactory(const ::std::shared_ptr<RoomFactoryPrx>& factory, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        _makePromiseOutgoing<void>(true, this, &LobbyPrx::_iceI_RegisterRoomFactory, factory, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto RegisterRoomFactoryAsync(const ::std::shared_ptr<RoomFactoryPrx>& factory, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<void>>().get_future())
    {
        return _makePromiseOutgoing<void, P>(false, this, &LobbyPrx::_iceI_RegisterRoomFactory, factory, context);
    }

    ::std::function<void()>
    RegisterRoomFactoryAsync(const ::std::shared_ptr<RoomFactoryPrx>& factory,
                             ::std::function<void()> response,
                             ::std::function<void(::std::exception_ptr)> ex = nullptr,
                             ::std::function<void(bool)> sent = nullptr,
                             const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<void>(std::move(response), std::move(ex), std::move(sent), this, &Chat::LobbyPrx::_iceI_RegisterRoomFactory, factory, context);
    }

    /// \cond INTERNAL
    void _iceI_RegisterRoomFactory(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, const ::std::shared_ptr<RoomFactoryPrx>&, const ::Ice::Context&);
    /// \endcond

    void UnregisterRoomFactory(const ::std::shared_ptr<RoomFactoryPrx>& factory, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        _makePromiseOutgoing<void>(true, this, &LobbyPrx::_iceI_UnregisterRoomFactory, factory, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto UnregisterRoomFactoryAsync(const ::std::shared_ptr<RoomFactoryPrx>& factory, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<void>>().get_future())
    {
        return _makePromiseOutgoing<void, P>(false, this, &LobbyPrx::_iceI_UnregisterRoomFactory, factory, context);
    }

    ::std::function<void()>
    UnregisterRoomFactoryAsync(const ::std::shared_ptr<RoomFactoryPrx>& factory,
                               ::std::function<void()> response,
                               ::std::function<void(::std::exception_ptr)> ex = nullptr,
                               ::std::function<void(bool)> sent = nullptr,
                               const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<void>(std::move(response), std::move(ex), std::move(sent), this, &Chat::LobbyPrx::_iceI_UnregisterRoomFactory, factory, context);
    }

    /// \cond INTERNAL
    void _iceI_UnregisterRoomFactory(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, const ::std::shared_ptr<RoomFactoryPrx>&, const ::Ice::Context&);
    /// \endcond

    /**
     * Obtains the Slice type ID of this interface.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

protected:

    /// \cond INTERNAL
    LobbyPrx() = default;
    friend ::std::shared_ptr<LobbyPrx> IceInternal::createProxy<LobbyPrx>();

    virtual ::std::shared_ptr<::Ice::ObjectPrx> _newInstance() const override;
    /// \endcond
};

class UserPrx : public virtual ::Ice::Proxy<UserPrx, ::Ice::ObjectPrx>
{
public:

    void sendMessage(const ::std::shared_ptr<RoomPrx>& room, const ::std::shared_ptr<UserPrx>& user, const ::std::string& message, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        _makePromiseOutgoing<void>(true, this, &UserPrx::_iceI_sendMessage, room, user, message, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto sendMessageAsync(const ::std::shared_ptr<RoomPrx>& room, const ::std::shared_ptr<UserPrx>& user, const ::std::string& message, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<void>>().get_future())
    {
        return _makePromiseOutgoing<void, P>(false, this, &UserPrx::_iceI_sendMessage, room, user, message, context);
    }

    ::std::function<void()>
    sendMessageAsync(const ::std::shared_ptr<RoomPrx>& room, const ::std::shared_ptr<UserPrx>& user, const ::std::string& message,
                     ::std::function<void()> response,
                     ::std::function<void(::std::exception_ptr)> ex = nullptr,
                     ::std::function<void(bool)> sent = nullptr,
                     const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<void>(std::move(response), std::move(ex), std::move(sent), this, &Chat::UserPrx::_iceI_sendMessage, room, user, message, context);
    }

    /// \cond INTERNAL
    void _iceI_sendMessage(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, const ::std::shared_ptr<RoomPrx>&, const ::std::shared_ptr<UserPrx>&, const ::std::string&, const ::Ice::Context&);
    /// \endcond

    void sendPrivateMessage(const ::std::shared_ptr<UserPrx>& user, const ::std::string& message, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        _makePromiseOutgoing<void>(true, this, &UserPrx::_iceI_sendPrivateMessage, user, message, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto sendPrivateMessageAsync(const ::std::shared_ptr<UserPrx>& user, const ::std::string& message, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<void>>().get_future())
    {
        return _makePromiseOutgoing<void, P>(false, this, &UserPrx::_iceI_sendPrivateMessage, user, message, context);
    }

    ::std::function<void()>
    sendPrivateMessageAsync(const ::std::shared_ptr<UserPrx>& user, const ::std::string& message,
                            ::std::function<void()> response,
                            ::std::function<void(::std::exception_ptr)> ex = nullptr,
                            ::std::function<void(bool)> sent = nullptr,
                            const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<void>(std::move(response), std::move(ex), std::move(sent), this, &Chat::UserPrx::_iceI_sendPrivateMessage, user, message, context);
    }

    /// \cond INTERNAL
    void _iceI_sendPrivateMessage(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, const ::std::shared_ptr<UserPrx>&, const ::std::string&, const ::Ice::Context&);
    /// \endcond

    ::std::string getName(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makePromiseOutgoing<::std::string>(true, this, &UserPrx::_iceI_getName, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto getNameAsync(const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<::std::string>>().get_future())
    {
        return _makePromiseOutgoing<::std::string, P>(false, this, &UserPrx::_iceI_getName, context);
    }

    ::std::function<void()>
    getNameAsync(::std::function<void(::std::string)> response,
                 ::std::function<void(::std::exception_ptr)> ex = nullptr,
                 ::std::function<void(bool)> sent = nullptr,
                 const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<::std::string>(std::move(response), std::move(ex), std::move(sent), this, &Chat::UserPrx::_iceI_getName, context);
    }

    /// \cond INTERNAL
    void _iceI_getName(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::string>>&, const ::Ice::Context&);
    /// \endcond

    UserStatus getStatus(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makePromiseOutgoing<::Chat::UserStatus>(true, this, &UserPrx::_iceI_getStatus, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto getStatusAsync(const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<::Chat::UserStatus>>().get_future())
    {
        return _makePromiseOutgoing<::Chat::UserStatus, P>(false, this, &UserPrx::_iceI_getStatus, context);
    }

    ::std::function<void()>
    getStatusAsync(::std::function<void(::Chat::UserStatus)> response,
                   ::std::function<void(::std::exception_ptr)> ex = nullptr,
                   ::std::function<void(bool)> sent = nullptr,
                   const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<::Chat::UserStatus>(std::move(response), std::move(ex), std::move(sent), this, &Chat::UserPrx::_iceI_getStatus, context);
    }

    /// \cond INTERNAL
    void _iceI_getStatus(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::Chat::UserStatus>>&, const ::Ice::Context&);
    /// \endcond

    /**
     * Obtains the Slice type ID of this interface.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

protected:

    /// \cond INTERNAL
    UserPrx() = default;
    friend ::std::shared_ptr<UserPrx> IceInternal::createProxy<UserPrx>();

    virtual ::std::shared_ptr<::Ice::ObjectPrx> _newInstance() const override;
    /// \endcond
};

class RoomPrx : public virtual ::Ice::Proxy<RoomPrx, ::Ice::ObjectPrx>
{
public:

    void join(const ::std::shared_ptr<UserPrx>& user, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        _makePromiseOutgoing<void>(true, this, &RoomPrx::_iceI_join, user, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto joinAsync(const ::std::shared_ptr<UserPrx>& user, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<void>>().get_future())
    {
        return _makePromiseOutgoing<void, P>(false, this, &RoomPrx::_iceI_join, user, context);
    }

    ::std::function<void()>
    joinAsync(const ::std::shared_ptr<UserPrx>& user,
              ::std::function<void()> response,
              ::std::function<void(::std::exception_ptr)> ex = nullptr,
              ::std::function<void(bool)> sent = nullptr,
              const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<void>(std::move(response), std::move(ex), std::move(sent), this, &Chat::RoomPrx::_iceI_join, user, context);
    }

    /// \cond INTERNAL
    void _iceI_join(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, const ::std::shared_ptr<UserPrx>&, const ::Ice::Context&);
    /// \endcond

    void sendMessage(const ::std::shared_ptr<UserPrx>& user, const ::std::string& message, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        _makePromiseOutgoing<void>(true, this, &RoomPrx::_iceI_sendMessage, user, message, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto sendMessageAsync(const ::std::shared_ptr<UserPrx>& user, const ::std::string& message, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<void>>().get_future())
    {
        return _makePromiseOutgoing<void, P>(false, this, &RoomPrx::_iceI_sendMessage, user, message, context);
    }

    ::std::function<void()>
    sendMessageAsync(const ::std::shared_ptr<UserPrx>& user, const ::std::string& message,
                     ::std::function<void()> response,
                     ::std::function<void(::std::exception_ptr)> ex = nullptr,
                     ::std::function<void(bool)> sent = nullptr,
                     const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<void>(std::move(response), std::move(ex), std::move(sent), this, &Chat::RoomPrx::_iceI_sendMessage, user, message, context);
    }

    /// \cond INTERNAL
    void _iceI_sendMessage(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, const ::std::shared_ptr<UserPrx>&, const ::std::string&, const ::Ice::Context&);
    /// \endcond

    void leave(const ::std::shared_ptr<UserPrx>& user, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        _makePromiseOutgoing<void>(true, this, &RoomPrx::_iceI_leave, user, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto leaveAsync(const ::std::shared_ptr<UserPrx>& user, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<void>>().get_future())
    {
        return _makePromiseOutgoing<void, P>(false, this, &RoomPrx::_iceI_leave, user, context);
    }

    ::std::function<void()>
    leaveAsync(const ::std::shared_ptr<UserPrx>& user,
               ::std::function<void()> response,
               ::std::function<void(::std::exception_ptr)> ex = nullptr,
               ::std::function<void(bool)> sent = nullptr,
               const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<void>(std::move(response), std::move(ex), std::move(sent), this, &Chat::RoomPrx::_iceI_leave, user, context);
    }

    /// \cond INTERNAL
    void _iceI_leave(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, const ::std::shared_ptr<UserPrx>&, const ::Ice::Context&);
    /// \endcond

    Users ListUsers(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makePromiseOutgoing<::Chat::Users>(true, this, &RoomPrx::_iceI_ListUsers, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto ListUsersAsync(const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<::Chat::Users>>().get_future())
    {
        return _makePromiseOutgoing<::Chat::Users, P>(false, this, &RoomPrx::_iceI_ListUsers, context);
    }

    ::std::function<void()>
    ListUsersAsync(::std::function<void(::Chat::Users)> response,
                   ::std::function<void(::std::exception_ptr)> ex = nullptr,
                   ::std::function<void(bool)> sent = nullptr,
                   const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<::Chat::Users>(std::move(response), std::move(ex), std::move(sent), this, &Chat::RoomPrx::_iceI_ListUsers, context);
    }

    /// \cond INTERNAL
    void _iceI_ListUsers(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::Chat::Users>>&, const ::Ice::Context&);
    /// \endcond

    /**
     * Obtains the Slice type ID of this interface.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

protected:

    /// \cond INTERNAL
    RoomPrx() = default;
    friend ::std::shared_ptr<RoomPrx> IceInternal::createProxy<RoomPrx>();

    virtual ::std::shared_ptr<::Ice::ObjectPrx> _newInstance() const override;
    /// \endcond
};

class RoomFactoryPrx : public virtual ::Ice::Proxy<RoomFactoryPrx, ::Ice::ObjectPrx>
{
public:

    ::std::shared_ptr<RoomPrx> createRoom(const ::std::string& name, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makePromiseOutgoing<::std::shared_ptr<::Chat::RoomPrx>>(true, this, &RoomFactoryPrx::_iceI_createRoom, name, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto createRoomAsync(const ::std::string& name, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<::std::shared_ptr<::Chat::RoomPrx>>>().get_future())
    {
        return _makePromiseOutgoing<::std::shared_ptr<::Chat::RoomPrx>, P>(false, this, &RoomFactoryPrx::_iceI_createRoom, name, context);
    }

    ::std::function<void()>
    createRoomAsync(const ::std::string& name,
                    ::std::function<void(::std::shared_ptr<::Chat::RoomPrx>)> response,
                    ::std::function<void(::std::exception_ptr)> ex = nullptr,
                    ::std::function<void(bool)> sent = nullptr,
                    const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<::std::shared_ptr<::Chat::RoomPrx>>(std::move(response), std::move(ex), std::move(sent), this, &Chat::RoomFactoryPrx::_iceI_createRoom, name, context);
    }

    /// \cond INTERNAL
    void _iceI_createRoom(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::shared_ptr<::Chat::RoomPrx>>>&, const ::std::string&, const ::Ice::Context&);
    /// \endcond

    double getServerLoad(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makePromiseOutgoing<double>(true, this, &RoomFactoryPrx::_iceI_getServerLoad, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto getServerLoadAsync(const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<double>>().get_future())
    {
        return _makePromiseOutgoing<double, P>(false, this, &RoomFactoryPrx::_iceI_getServerLoad, context);
    }

    ::std::function<void()>
    getServerLoadAsync(::std::function<void(double)> response,
                       ::std::function<void(::std::exception_ptr)> ex = nullptr,
                       ::std::function<void(bool)> sent = nullptr,
                       const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<double>(std::move(response), std::move(ex), std::move(sent), this, &Chat::RoomFactoryPrx::_iceI_getServerLoad, context);
    }

    /// \cond INTERNAL
    void _iceI_getServerLoad(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<double>>&, const ::Ice::Context&);
    /// \endcond

    /**
     * Obtains the Slice type ID of this interface.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

protected:

    /// \cond INTERNAL
    RoomFactoryPrx() = default;
    friend ::std::shared_ptr<RoomFactoryPrx> IceInternal::createProxy<RoomFactoryPrx>();

    virtual ::std::shared_ptr<::Ice::ObjectPrx> _newInstance() const override;
    /// \endcond
};

}

/// \cond STREAM
namespace Ice
{

template<>
struct StreamableTraits< ::Chat::UserStatus>
{
    static const StreamHelperCategory helper = StreamHelperCategoryEnum;
    static const int minValue = 0;
    static const int maxValue = 2;
    static const int minWireSize = 1;
    static const bool fixedLength = false;
};

}
/// \endcond

/// \cond INTERNAL
namespace Chat
{

using RoomPtr = ::std::shared_ptr<Room>;
using RoomPrxPtr = ::std::shared_ptr<RoomPrx>;

using UserPtr = ::std::shared_ptr<User>;
using UserPrxPtr = ::std::shared_ptr<UserPrx>;

using RoomFactoryPtr = ::std::shared_ptr<RoomFactory>;
using RoomFactoryPrxPtr = ::std::shared_ptr<RoomFactoryPrx>;

using LobbyPtr = ::std::shared_ptr<Lobby>;
using LobbyPrxPtr = ::std::shared_ptr<LobbyPrx>;

}
/// \endcond

#else // C++98 mapping

namespace IceProxy
{

namespace Chat
{

class Room;
/// \cond INTERNAL
void _readProxy(::Ice::InputStream*, ::IceInternal::ProxyHandle< Room>&);
::IceProxy::Ice::Object* upCast(Room*);
/// \endcond

class User;
/// \cond INTERNAL
void _readProxy(::Ice::InputStream*, ::IceInternal::ProxyHandle< User>&);
::IceProxy::Ice::Object* upCast(User*);
/// \endcond

class RoomFactory;
/// \cond INTERNAL
void _readProxy(::Ice::InputStream*, ::IceInternal::ProxyHandle< RoomFactory>&);
::IceProxy::Ice::Object* upCast(RoomFactory*);
/// \endcond

class Lobby;
/// \cond INTERNAL
void _readProxy(::Ice::InputStream*, ::IceInternal::ProxyHandle< Lobby>&);
::IceProxy::Ice::Object* upCast(Lobby*);
/// \endcond

}

}

namespace Chat
{

class Room;
/// \cond INTERNAL
::Ice::Object* upCast(Room*);
/// \endcond
typedef ::IceInternal::Handle< Room> RoomPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::Chat::Room> RoomPrx;
typedef RoomPrx RoomPrxPtr;
/// \cond INTERNAL
void _icePatchObjectPtr(RoomPtr&, const ::Ice::ObjectPtr&);
/// \endcond

class User;
/// \cond INTERNAL
::Ice::Object* upCast(User*);
/// \endcond
typedef ::IceInternal::Handle< User> UserPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::Chat::User> UserPrx;
typedef UserPrx UserPrxPtr;
/// \cond INTERNAL
void _icePatchObjectPtr(UserPtr&, const ::Ice::ObjectPtr&);
/// \endcond

class RoomFactory;
/// \cond INTERNAL
::Ice::Object* upCast(RoomFactory*);
/// \endcond
typedef ::IceInternal::Handle< RoomFactory> RoomFactoryPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::Chat::RoomFactory> RoomFactoryPrx;
typedef RoomFactoryPrx RoomFactoryPrxPtr;
/// \cond INTERNAL
void _icePatchObjectPtr(RoomFactoryPtr&, const ::Ice::ObjectPtr&);
/// \endcond

class Lobby;
/// \cond INTERNAL
::Ice::Object* upCast(Lobby*);
/// \endcond
typedef ::IceInternal::Handle< Lobby> LobbyPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::Chat::Lobby> LobbyPrx;
typedef LobbyPrx LobbyPrxPtr;
/// \cond INTERNAL
void _icePatchObjectPtr(LobbyPtr&, const ::Ice::ObjectPtr&);
/// \endcond

}

namespace Chat
{

class AccessDenied : public ::Ice::UserException
{
public:

    AccessDenied() {}

#ifdef ICE_CPP11_COMPILER
    AccessDenied(const AccessDenied&) = default;
    virtual ~AccessDenied();
#else
    virtual ~AccessDenied() throw();
#endif

    /**
     * Obtains the Slice type ID of this exception.
     * @return The fully-scoped type ID.
     */
    virtual ::std::string ice_id() const;
    /**
     * Polymorphically clones this exception.
     * @return A shallow copy of this exception.
     */
    virtual AccessDenied* ice_clone() const;
    /**
     * Throws this exception.
     */
    virtual void ice_throw() const;

protected:

    /// \cond STREAM
    virtual void _writeImpl(::Ice::OutputStream*) const;
    virtual void _readImpl(::Ice::InputStream*);
    /// \endcond
};

/// \cond INTERNAL
static AccessDenied _iceS_AccessDenied_init;
/// \endcond

class UserExists : public ::Ice::UserException
{
public:

    UserExists() {}

#ifdef ICE_CPP11_COMPILER
    UserExists(const UserExists&) = default;
    virtual ~UserExists();
#else
    virtual ~UserExists() throw();
#endif

    /**
     * Obtains the Slice type ID of this exception.
     * @return The fully-scoped type ID.
     */
    virtual ::std::string ice_id() const;
    /**
     * Polymorphically clones this exception.
     * @return A shallow copy of this exception.
     */
    virtual UserExists* ice_clone() const;
    /**
     * Throws this exception.
     */
    virtual void ice_throw() const;

protected:

    /// \cond STREAM
    virtual void _writeImpl(::Ice::OutputStream*) const;
    virtual void _readImpl(::Ice::InputStream*);
    /// \endcond
};

class RoomExists : public ::Ice::UserException
{
public:

    RoomExists() {}

#ifdef ICE_CPP11_COMPILER
    RoomExists(const RoomExists&) = default;
    virtual ~RoomExists();
#else
    virtual ~RoomExists() throw();
#endif

    /**
     * Obtains the Slice type ID of this exception.
     * @return The fully-scoped type ID.
     */
    virtual ::std::string ice_id() const;
    /**
     * Polymorphically clones this exception.
     * @return A shallow copy of this exception.
     */
    virtual RoomExists* ice_clone() const;
    /**
     * Throws this exception.
     */
    virtual void ice_throw() const;

protected:

    /// \cond STREAM
    virtual void _writeImpl(::Ice::OutputStream*) const;
    virtual void _readImpl(::Ice::InputStream*);
    /// \endcond
};

class RoomFactoryExists : public ::Ice::UserException
{
public:

    RoomFactoryExists() {}

#ifdef ICE_CPP11_COMPILER
    RoomFactoryExists(const RoomFactoryExists&) = default;
    virtual ~RoomFactoryExists();
#else
    virtual ~RoomFactoryExists() throw();
#endif

    /**
     * Obtains the Slice type ID of this exception.
     * @return The fully-scoped type ID.
     */
    virtual ::std::string ice_id() const;
    /**
     * Polymorphically clones this exception.
     * @return A shallow copy of this exception.
     */
    virtual RoomFactoryExists* ice_clone() const;
    /**
     * Throws this exception.
     */
    virtual void ice_throw() const;

protected:

    /// \cond STREAM
    virtual void _writeImpl(::Ice::OutputStream*) const;
    virtual void _readImpl(::Ice::InputStream*);
    /// \endcond
};

class NoSuchFactory : public ::Ice::UserException
{
public:

    NoSuchFactory() {}

#ifdef ICE_CPP11_COMPILER
    NoSuchFactory(const NoSuchFactory&) = default;
    virtual ~NoSuchFactory();
#else
    virtual ~NoSuchFactory() throw();
#endif

    /**
     * Obtains the Slice type ID of this exception.
     * @return The fully-scoped type ID.
     */
    virtual ::std::string ice_id() const;
    /**
     * Polymorphically clones this exception.
     * @return A shallow copy of this exception.
     */
    virtual NoSuchFactory* ice_clone() const;
    /**
     * Throws this exception.
     */
    virtual void ice_throw() const;

protected:

    /// \cond STREAM
    virtual void _writeImpl(::Ice::OutputStream*) const;
    virtual void _readImpl(::Ice::InputStream*);
    /// \endcond
};

enum UserStatus
{
    Online,
    Offline,
    BeBack
};

typedef ::std::vector<RoomPrx> Rooms;

typedef ::std::vector<UserPrx> Users;

}

namespace Chat
{

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::Chat::Lobby::begin_register.
 * Create a wrapper instance by calling ::Chat::newCallback_Lobby_register.
 */
class Callback_Lobby_register_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Lobby_register_Base> Callback_Lobby_registerPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::Chat::Lobby::begin_login.
 * Create a wrapper instance by calling ::Chat::newCallback_Lobby_login.
 */
class Callback_Lobby_login_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Lobby_login_Base> Callback_Lobby_loginPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::Chat::Lobby::begin_logout.
 * Create a wrapper instance by calling ::Chat::newCallback_Lobby_logout.
 */
class Callback_Lobby_logout_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Lobby_logout_Base> Callback_Lobby_logoutPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::Chat::Lobby::begin_getRooms.
 * Create a wrapper instance by calling ::Chat::newCallback_Lobby_getRooms.
 */
class Callback_Lobby_getRooms_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Lobby_getRooms_Base> Callback_Lobby_getRoomsPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::Chat::Lobby::begin_createRoom.
 * Create a wrapper instance by calling ::Chat::newCallback_Lobby_createRoom.
 */
class Callback_Lobby_createRoom_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Lobby_createRoom_Base> Callback_Lobby_createRoomPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::Chat::Lobby::begin_findRoom.
 * Create a wrapper instance by calling ::Chat::newCallback_Lobby_findRoom.
 */
class Callback_Lobby_findRoom_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Lobby_findRoom_Base> Callback_Lobby_findRoomPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::Chat::Lobby::begin_ListUsers.
 * Create a wrapper instance by calling ::Chat::newCallback_Lobby_ListUsers.
 */
class Callback_Lobby_ListUsers_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Lobby_ListUsers_Base> Callback_Lobby_ListUsersPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::Chat::Lobby::begin_RegisterRoomFactory.
 * Create a wrapper instance by calling ::Chat::newCallback_Lobby_RegisterRoomFactory.
 */
class Callback_Lobby_RegisterRoomFactory_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Lobby_RegisterRoomFactory_Base> Callback_Lobby_RegisterRoomFactoryPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::Chat::Lobby::begin_UnregisterRoomFactory.
 * Create a wrapper instance by calling ::Chat::newCallback_Lobby_UnregisterRoomFactory.
 */
class Callback_Lobby_UnregisterRoomFactory_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Lobby_UnregisterRoomFactory_Base> Callback_Lobby_UnregisterRoomFactoryPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::Chat::User::begin_sendMessage.
 * Create a wrapper instance by calling ::Chat::newCallback_User_sendMessage.
 */
class Callback_User_sendMessage_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_User_sendMessage_Base> Callback_User_sendMessagePtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::Chat::User::begin_sendPrivateMessage.
 * Create a wrapper instance by calling ::Chat::newCallback_User_sendPrivateMessage.
 */
class Callback_User_sendPrivateMessage_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_User_sendPrivateMessage_Base> Callback_User_sendPrivateMessagePtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::Chat::User::begin_getName.
 * Create a wrapper instance by calling ::Chat::newCallback_User_getName.
 */
class Callback_User_getName_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_User_getName_Base> Callback_User_getNamePtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::Chat::User::begin_getStatus.
 * Create a wrapper instance by calling ::Chat::newCallback_User_getStatus.
 */
class Callback_User_getStatus_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_User_getStatus_Base> Callback_User_getStatusPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::Chat::Room::begin_join.
 * Create a wrapper instance by calling ::Chat::newCallback_Room_join.
 */
class Callback_Room_join_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Room_join_Base> Callback_Room_joinPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::Chat::Room::begin_sendMessage.
 * Create a wrapper instance by calling ::Chat::newCallback_Room_sendMessage.
 */
class Callback_Room_sendMessage_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Room_sendMessage_Base> Callback_Room_sendMessagePtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::Chat::Room::begin_leave.
 * Create a wrapper instance by calling ::Chat::newCallback_Room_leave.
 */
class Callback_Room_leave_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Room_leave_Base> Callback_Room_leavePtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::Chat::Room::begin_ListUsers.
 * Create a wrapper instance by calling ::Chat::newCallback_Room_ListUsers.
 */
class Callback_Room_ListUsers_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Room_ListUsers_Base> Callback_Room_ListUsersPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::Chat::RoomFactory::begin_createRoom.
 * Create a wrapper instance by calling ::Chat::newCallback_RoomFactory_createRoom.
 */
class Callback_RoomFactory_createRoom_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_RoomFactory_createRoom_Base> Callback_RoomFactory_createRoomPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::Chat::RoomFactory::begin_getServerLoad.
 * Create a wrapper instance by calling ::Chat::newCallback_RoomFactory_getServerLoad.
 */
class Callback_RoomFactory_getServerLoad_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_RoomFactory_getServerLoad_Base> Callback_RoomFactory_getServerLoadPtr;

}

namespace IceProxy
{

namespace Chat
{

class Lobby : public virtual ::Ice::Proxy<Lobby, ::IceProxy::Ice::Object>
{
public:

    void _cpp_register(const ::Chat::UserPrx& user, const ::std::string& password, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        end_register(_iceI_begin_register(user, password, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_register(const ::Chat::UserPrx& user, const ::std::string& password, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_register(user, password, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_register(const ::Chat::UserPrx& user, const ::std::string& password, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_register(user, password, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_register(const ::Chat::UserPrx& user, const ::std::string& password, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_register(user, password, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_register(const ::Chat::UserPrx& user, const ::std::string& password, const ::Chat::Callback_Lobby_registerPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_register(user, password, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_register(const ::Chat::UserPrx& user, const ::std::string& password, const ::Ice::Context& context, const ::Chat::Callback_Lobby_registerPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_register(user, password, context, cb, cookie);
    }

    void end_register(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_register(const ::Chat::UserPrx&, const ::std::string&, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    void login(const ::Chat::UserPrx& user, const ::std::string& password, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        end_login(_iceI_begin_login(user, password, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_login(const ::Chat::UserPrx& user, const ::std::string& password, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_login(user, password, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_login(const ::Chat::UserPrx& user, const ::std::string& password, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_login(user, password, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_login(const ::Chat::UserPrx& user, const ::std::string& password, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_login(user, password, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_login(const ::Chat::UserPrx& user, const ::std::string& password, const ::Chat::Callback_Lobby_loginPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_login(user, password, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_login(const ::Chat::UserPrx& user, const ::std::string& password, const ::Ice::Context& context, const ::Chat::Callback_Lobby_loginPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_login(user, password, context, cb, cookie);
    }

    void end_login(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_login(const ::Chat::UserPrx&, const ::std::string&, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    void logout(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        end_logout(_iceI_begin_logout(context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_logout(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_logout(context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_logout(const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_logout(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_logout(const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_logout(context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_logout(const ::Chat::Callback_Lobby_logoutPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_logout(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_logout(const ::Ice::Context& context, const ::Chat::Callback_Lobby_logoutPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_logout(context, cb, cookie);
    }

    void end_logout(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_logout(const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    ::Chat::Rooms getRooms(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_getRooms(_iceI_begin_getRooms(context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_getRooms(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_getRooms(context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getRooms(const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getRooms(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_getRooms(const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getRooms(context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_getRooms(const ::Chat::Callback_Lobby_getRoomsPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getRooms(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_getRooms(const ::Ice::Context& context, const ::Chat::Callback_Lobby_getRoomsPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getRooms(context, cb, cookie);
    }

    ::Chat::Rooms end_getRooms(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_getRooms(const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    ::Chat::RoomPrx createRoom(const ::std::string& name, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_createRoom(_iceI_begin_createRoom(name, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_createRoom(const ::std::string& name, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_createRoom(name, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_createRoom(const ::std::string& name, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_createRoom(name, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_createRoom(const ::std::string& name, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_createRoom(name, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_createRoom(const ::std::string& name, const ::Chat::Callback_Lobby_createRoomPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_createRoom(name, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_createRoom(const ::std::string& name, const ::Ice::Context& context, const ::Chat::Callback_Lobby_createRoomPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_createRoom(name, context, cb, cookie);
    }

    ::Chat::RoomPrx end_createRoom(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_createRoom(const ::std::string&, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    ::Chat::RoomPrx findRoom(const ::std::string& name, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_findRoom(_iceI_begin_findRoom(name, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_findRoom(const ::std::string& name, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_findRoom(name, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_findRoom(const ::std::string& name, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_findRoom(name, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_findRoom(const ::std::string& name, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_findRoom(name, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_findRoom(const ::std::string& name, const ::Chat::Callback_Lobby_findRoomPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_findRoom(name, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_findRoom(const ::std::string& name, const ::Ice::Context& context, const ::Chat::Callback_Lobby_findRoomPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_findRoom(name, context, cb, cookie);
    }

    ::Chat::RoomPrx end_findRoom(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_findRoom(const ::std::string&, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    ::Chat::Users ListUsers(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_ListUsers(_iceI_begin_ListUsers(context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_ListUsers(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_ListUsers(context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_ListUsers(const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_ListUsers(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_ListUsers(const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_ListUsers(context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_ListUsers(const ::Chat::Callback_Lobby_ListUsersPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_ListUsers(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_ListUsers(const ::Ice::Context& context, const ::Chat::Callback_Lobby_ListUsersPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_ListUsers(context, cb, cookie);
    }

    ::Chat::Users end_ListUsers(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_ListUsers(const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    void RegisterRoomFactory(const ::Chat::RoomFactoryPrx& factory, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        end_RegisterRoomFactory(_iceI_begin_RegisterRoomFactory(factory, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_RegisterRoomFactory(const ::Chat::RoomFactoryPrx& factory, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_RegisterRoomFactory(factory, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_RegisterRoomFactory(const ::Chat::RoomFactoryPrx& factory, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_RegisterRoomFactory(factory, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_RegisterRoomFactory(const ::Chat::RoomFactoryPrx& factory, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_RegisterRoomFactory(factory, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_RegisterRoomFactory(const ::Chat::RoomFactoryPrx& factory, const ::Chat::Callback_Lobby_RegisterRoomFactoryPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_RegisterRoomFactory(factory, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_RegisterRoomFactory(const ::Chat::RoomFactoryPrx& factory, const ::Ice::Context& context, const ::Chat::Callback_Lobby_RegisterRoomFactoryPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_RegisterRoomFactory(factory, context, cb, cookie);
    }

    void end_RegisterRoomFactory(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_RegisterRoomFactory(const ::Chat::RoomFactoryPrx&, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    void UnregisterRoomFactory(const ::Chat::RoomFactoryPrx& factory, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        end_UnregisterRoomFactory(_iceI_begin_UnregisterRoomFactory(factory, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_UnregisterRoomFactory(const ::Chat::RoomFactoryPrx& factory, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_UnregisterRoomFactory(factory, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_UnregisterRoomFactory(const ::Chat::RoomFactoryPrx& factory, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_UnregisterRoomFactory(factory, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_UnregisterRoomFactory(const ::Chat::RoomFactoryPrx& factory, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_UnregisterRoomFactory(factory, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_UnregisterRoomFactory(const ::Chat::RoomFactoryPrx& factory, const ::Chat::Callback_Lobby_UnregisterRoomFactoryPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_UnregisterRoomFactory(factory, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_UnregisterRoomFactory(const ::Chat::RoomFactoryPrx& factory, const ::Ice::Context& context, const ::Chat::Callback_Lobby_UnregisterRoomFactoryPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_UnregisterRoomFactory(factory, context, cb, cookie);
    }

    void end_UnregisterRoomFactory(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_UnregisterRoomFactory(const ::Chat::RoomFactoryPrx&, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    /**
     * Obtains the Slice type ID corresponding to this interface.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

protected:
    /// \cond INTERNAL

    virtual ::IceProxy::Ice::Object* _newInstance() const;
    /// \endcond
};

class User : public virtual ::Ice::Proxy<User, ::IceProxy::Ice::Object>
{
public:

    void sendMessage(const ::Chat::RoomPrx& room, const ::Chat::UserPrx& user, const ::std::string& message, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        end_sendMessage(_iceI_begin_sendMessage(room, user, message, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_sendMessage(const ::Chat::RoomPrx& room, const ::Chat::UserPrx& user, const ::std::string& message, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_sendMessage(room, user, message, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_sendMessage(const ::Chat::RoomPrx& room, const ::Chat::UserPrx& user, const ::std::string& message, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_sendMessage(room, user, message, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_sendMessage(const ::Chat::RoomPrx& room, const ::Chat::UserPrx& user, const ::std::string& message, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_sendMessage(room, user, message, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_sendMessage(const ::Chat::RoomPrx& room, const ::Chat::UserPrx& user, const ::std::string& message, const ::Chat::Callback_User_sendMessagePtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_sendMessage(room, user, message, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_sendMessage(const ::Chat::RoomPrx& room, const ::Chat::UserPrx& user, const ::std::string& message, const ::Ice::Context& context, const ::Chat::Callback_User_sendMessagePtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_sendMessage(room, user, message, context, cb, cookie);
    }

    void end_sendMessage(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_sendMessage(const ::Chat::RoomPrx&, const ::Chat::UserPrx&, const ::std::string&, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    void sendPrivateMessage(const ::Chat::UserPrx& user, const ::std::string& message, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        end_sendPrivateMessage(_iceI_begin_sendPrivateMessage(user, message, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_sendPrivateMessage(const ::Chat::UserPrx& user, const ::std::string& message, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_sendPrivateMessage(user, message, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_sendPrivateMessage(const ::Chat::UserPrx& user, const ::std::string& message, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_sendPrivateMessage(user, message, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_sendPrivateMessage(const ::Chat::UserPrx& user, const ::std::string& message, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_sendPrivateMessage(user, message, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_sendPrivateMessage(const ::Chat::UserPrx& user, const ::std::string& message, const ::Chat::Callback_User_sendPrivateMessagePtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_sendPrivateMessage(user, message, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_sendPrivateMessage(const ::Chat::UserPrx& user, const ::std::string& message, const ::Ice::Context& context, const ::Chat::Callback_User_sendPrivateMessagePtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_sendPrivateMessage(user, message, context, cb, cookie);
    }

    void end_sendPrivateMessage(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_sendPrivateMessage(const ::Chat::UserPrx&, const ::std::string&, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    ::std::string getName(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_getName(_iceI_begin_getName(context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_getName(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_getName(context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getName(const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getName(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_getName(const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getName(context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_getName(const ::Chat::Callback_User_getNamePtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getName(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_getName(const ::Ice::Context& context, const ::Chat::Callback_User_getNamePtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getName(context, cb, cookie);
    }

    ::std::string end_getName(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_getName(const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    ::Chat::UserStatus getStatus(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_getStatus(_iceI_begin_getStatus(context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_getStatus(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_getStatus(context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getStatus(const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getStatus(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_getStatus(const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getStatus(context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_getStatus(const ::Chat::Callback_User_getStatusPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getStatus(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_getStatus(const ::Ice::Context& context, const ::Chat::Callback_User_getStatusPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getStatus(context, cb, cookie);
    }

    ::Chat::UserStatus end_getStatus(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_getStatus(const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    /**
     * Obtains the Slice type ID corresponding to this interface.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

protected:
    /// \cond INTERNAL

    virtual ::IceProxy::Ice::Object* _newInstance() const;
    /// \endcond
};

class Room : public virtual ::Ice::Proxy<Room, ::IceProxy::Ice::Object>
{
public:

    void join(const ::Chat::UserPrx& user, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        end_join(_iceI_begin_join(user, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_join(const ::Chat::UserPrx& user, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_join(user, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_join(const ::Chat::UserPrx& user, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_join(user, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_join(const ::Chat::UserPrx& user, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_join(user, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_join(const ::Chat::UserPrx& user, const ::Chat::Callback_Room_joinPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_join(user, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_join(const ::Chat::UserPrx& user, const ::Ice::Context& context, const ::Chat::Callback_Room_joinPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_join(user, context, cb, cookie);
    }

    void end_join(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_join(const ::Chat::UserPrx&, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    void sendMessage(const ::Chat::UserPrx& user, const ::std::string& message, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        end_sendMessage(_iceI_begin_sendMessage(user, message, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_sendMessage(const ::Chat::UserPrx& user, const ::std::string& message, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_sendMessage(user, message, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_sendMessage(const ::Chat::UserPrx& user, const ::std::string& message, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_sendMessage(user, message, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_sendMessage(const ::Chat::UserPrx& user, const ::std::string& message, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_sendMessage(user, message, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_sendMessage(const ::Chat::UserPrx& user, const ::std::string& message, const ::Chat::Callback_Room_sendMessagePtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_sendMessage(user, message, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_sendMessage(const ::Chat::UserPrx& user, const ::std::string& message, const ::Ice::Context& context, const ::Chat::Callback_Room_sendMessagePtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_sendMessage(user, message, context, cb, cookie);
    }

    void end_sendMessage(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_sendMessage(const ::Chat::UserPrx&, const ::std::string&, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    void leave(const ::Chat::UserPrx& user, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        end_leave(_iceI_begin_leave(user, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_leave(const ::Chat::UserPrx& user, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_leave(user, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_leave(const ::Chat::UserPrx& user, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_leave(user, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_leave(const ::Chat::UserPrx& user, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_leave(user, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_leave(const ::Chat::UserPrx& user, const ::Chat::Callback_Room_leavePtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_leave(user, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_leave(const ::Chat::UserPrx& user, const ::Ice::Context& context, const ::Chat::Callback_Room_leavePtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_leave(user, context, cb, cookie);
    }

    void end_leave(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_leave(const ::Chat::UserPrx&, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    ::Chat::Users ListUsers(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_ListUsers(_iceI_begin_ListUsers(context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_ListUsers(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_ListUsers(context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_ListUsers(const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_ListUsers(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_ListUsers(const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_ListUsers(context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_ListUsers(const ::Chat::Callback_Room_ListUsersPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_ListUsers(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_ListUsers(const ::Ice::Context& context, const ::Chat::Callback_Room_ListUsersPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_ListUsers(context, cb, cookie);
    }

    ::Chat::Users end_ListUsers(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_ListUsers(const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    /**
     * Obtains the Slice type ID corresponding to this interface.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

protected:
    /// \cond INTERNAL

    virtual ::IceProxy::Ice::Object* _newInstance() const;
    /// \endcond
};

class RoomFactory : public virtual ::Ice::Proxy<RoomFactory, ::IceProxy::Ice::Object>
{
public:

    ::Chat::RoomPrx createRoom(const ::std::string& name, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_createRoom(_iceI_begin_createRoom(name, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_createRoom(const ::std::string& name, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_createRoom(name, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_createRoom(const ::std::string& name, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_createRoom(name, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_createRoom(const ::std::string& name, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_createRoom(name, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_createRoom(const ::std::string& name, const ::Chat::Callback_RoomFactory_createRoomPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_createRoom(name, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_createRoom(const ::std::string& name, const ::Ice::Context& context, const ::Chat::Callback_RoomFactory_createRoomPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_createRoom(name, context, cb, cookie);
    }

    ::Chat::RoomPrx end_createRoom(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_createRoom(const ::std::string&, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    ::Ice::Double getServerLoad(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_getServerLoad(_iceI_begin_getServerLoad(context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_getServerLoad(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_getServerLoad(context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getServerLoad(const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getServerLoad(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_getServerLoad(const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getServerLoad(context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_getServerLoad(const ::Chat::Callback_RoomFactory_getServerLoadPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getServerLoad(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_getServerLoad(const ::Ice::Context& context, const ::Chat::Callback_RoomFactory_getServerLoadPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getServerLoad(context, cb, cookie);
    }

    ::Ice::Double end_getServerLoad(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_getServerLoad(const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    /**
     * Obtains the Slice type ID corresponding to this interface.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

protected:
    /// \cond INTERNAL

    virtual ::IceProxy::Ice::Object* _newInstance() const;
    /// \endcond
};

}

}

namespace Chat
{

class Lobby : public virtual ::Ice::Object
{
public:

    typedef LobbyPrx ProxyType;
    typedef LobbyPtr PointerType;

    virtual ~Lobby();

#ifdef ICE_CPP11_COMPILER
    Lobby() = default;
    Lobby(const Lobby&) = default;
    Lobby& operator=(const Lobby&) = default;
#endif

    /**
     * Determines whether this object supports an interface with the given Slice type ID.
     * @param id The fully-scoped Slice type ID.
     * @param current The Current object for the invocation.
     * @return True if this object supports the interface, false, otherwise.
     */
    virtual bool ice_isA(const ::std::string& id, const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    virtual const ::std::string& ice_id(const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    virtual void _cpp_register(const UserPrx& user, const ::std::string& password, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_register(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void login(const UserPrx& user, const ::std::string& password, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_login(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void logout(const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_logout(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual Rooms getRooms(const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_getRooms(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual RoomPrx createRoom(const ::std::string& name, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_createRoom(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual RoomPrx findRoom(const ::std::string& name, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_findRoom(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual Users ListUsers(const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_ListUsers(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void RegisterRoomFactory(const RoomFactoryPrx& factory, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_RegisterRoomFactory(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void UnregisterRoomFactory(const RoomFactoryPrx& factory, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_UnregisterRoomFactory(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /// \cond INTERNAL
    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

protected:

    /// \cond STREAM
    virtual void _iceWriteImpl(::Ice::OutputStream*) const;
    virtual void _iceReadImpl(::Ice::InputStream*);
    /// \endcond
};

/// \cond INTERNAL
inline bool operator==(const Lobby& lhs, const Lobby& rhs)
{
    return static_cast<const ::Ice::Object&>(lhs) == static_cast<const ::Ice::Object&>(rhs);
}

inline bool operator<(const Lobby& lhs, const Lobby& rhs)
{
    return static_cast<const ::Ice::Object&>(lhs) < static_cast<const ::Ice::Object&>(rhs);
}
/// \endcond

class User : public virtual ::Ice::Object
{
public:

    typedef UserPrx ProxyType;
    typedef UserPtr PointerType;

    virtual ~User();

#ifdef ICE_CPP11_COMPILER
    User() = default;
    User(const User&) = default;
    User& operator=(const User&) = default;
#endif

    /**
     * Determines whether this object supports an interface with the given Slice type ID.
     * @param id The fully-scoped Slice type ID.
     * @param current The Current object for the invocation.
     * @return True if this object supports the interface, false, otherwise.
     */
    virtual bool ice_isA(const ::std::string& id, const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    virtual const ::std::string& ice_id(const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    virtual void sendMessage(const RoomPrx& room, const UserPrx& user, const ::std::string& message, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_sendMessage(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void sendPrivateMessage(const UserPrx& user, const ::std::string& message, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_sendPrivateMessage(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual ::std::string getName(const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_getName(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual UserStatus getStatus(const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_getStatus(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /// \cond INTERNAL
    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

protected:

    /// \cond STREAM
    virtual void _iceWriteImpl(::Ice::OutputStream*) const;
    virtual void _iceReadImpl(::Ice::InputStream*);
    /// \endcond
};

/// \cond INTERNAL
inline bool operator==(const User& lhs, const User& rhs)
{
    return static_cast<const ::Ice::Object&>(lhs) == static_cast<const ::Ice::Object&>(rhs);
}

inline bool operator<(const User& lhs, const User& rhs)
{
    return static_cast<const ::Ice::Object&>(lhs) < static_cast<const ::Ice::Object&>(rhs);
}
/// \endcond

class Room : public virtual ::Ice::Object
{
public:

    typedef RoomPrx ProxyType;
    typedef RoomPtr PointerType;

    virtual ~Room();

#ifdef ICE_CPP11_COMPILER
    Room() = default;
    Room(const Room&) = default;
    Room& operator=(const Room&) = default;
#endif

    /**
     * Determines whether this object supports an interface with the given Slice type ID.
     * @param id The fully-scoped Slice type ID.
     * @param current The Current object for the invocation.
     * @return True if this object supports the interface, false, otherwise.
     */
    virtual bool ice_isA(const ::std::string& id, const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    virtual const ::std::string& ice_id(const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    virtual void join(const UserPrx& user, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_join(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void sendMessage(const UserPrx& user, const ::std::string& message, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_sendMessage(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void leave(const UserPrx& user, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_leave(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual Users ListUsers(const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_ListUsers(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /// \cond INTERNAL
    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

protected:

    /// \cond STREAM
    virtual void _iceWriteImpl(::Ice::OutputStream*) const;
    virtual void _iceReadImpl(::Ice::InputStream*);
    /// \endcond
};

/// \cond INTERNAL
inline bool operator==(const Room& lhs, const Room& rhs)
{
    return static_cast<const ::Ice::Object&>(lhs) == static_cast<const ::Ice::Object&>(rhs);
}

inline bool operator<(const Room& lhs, const Room& rhs)
{
    return static_cast<const ::Ice::Object&>(lhs) < static_cast<const ::Ice::Object&>(rhs);
}
/// \endcond

class RoomFactory : public virtual ::Ice::Object
{
public:

    typedef RoomFactoryPrx ProxyType;
    typedef RoomFactoryPtr PointerType;

    virtual ~RoomFactory();

#ifdef ICE_CPP11_COMPILER
    RoomFactory() = default;
    RoomFactory(const RoomFactory&) = default;
    RoomFactory& operator=(const RoomFactory&) = default;
#endif

    /**
     * Determines whether this object supports an interface with the given Slice type ID.
     * @param id The fully-scoped Slice type ID.
     * @param current The Current object for the invocation.
     * @return True if this object supports the interface, false, otherwise.
     */
    virtual bool ice_isA(const ::std::string& id, const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    virtual const ::std::string& ice_id(const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    virtual RoomPrx createRoom(const ::std::string& name, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_createRoom(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual ::Ice::Double getServerLoad(const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_getServerLoad(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /// \cond INTERNAL
    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

protected:

    /// \cond STREAM
    virtual void _iceWriteImpl(::Ice::OutputStream*) const;
    virtual void _iceReadImpl(::Ice::InputStream*);
    /// \endcond
};

/// \cond INTERNAL
inline bool operator==(const RoomFactory& lhs, const RoomFactory& rhs)
{
    return static_cast<const ::Ice::Object&>(lhs) == static_cast<const ::Ice::Object&>(rhs);
}

inline bool operator<(const RoomFactory& lhs, const RoomFactory& rhs)
{
    return static_cast<const ::Ice::Object&>(lhs) < static_cast<const ::Ice::Object&>(rhs);
}
/// \endcond

}

/// \cond STREAM
namespace Ice
{

template<>
struct StreamableTraits< ::Chat::AccessDenied>
{
    static const StreamHelperCategory helper = StreamHelperCategoryUserException;
};

template<>
struct StreamableTraits< ::Chat::UserExists>
{
    static const StreamHelperCategory helper = StreamHelperCategoryUserException;
};

template<>
struct StreamableTraits< ::Chat::RoomExists>
{
    static const StreamHelperCategory helper = StreamHelperCategoryUserException;
};

template<>
struct StreamableTraits< ::Chat::RoomFactoryExists>
{
    static const StreamHelperCategory helper = StreamHelperCategoryUserException;
};

template<>
struct StreamableTraits< ::Chat::NoSuchFactory>
{
    static const StreamHelperCategory helper = StreamHelperCategoryUserException;
};

template<>
struct StreamableTraits< ::Chat::UserStatus>
{
    static const StreamHelperCategory helper = StreamHelperCategoryEnum;
    static const int minValue = 0;
    static const int maxValue = 2;
    static const int minWireSize = 1;
    static const bool fixedLength = false;
};

}
/// \endcond

namespace Chat
{

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::Chat::Lobby::begin_register.
 * Create a wrapper instance by calling ::Chat::newCallback_Lobby_register.
 */
template<class T>
class CallbackNC_Lobby_register : public Callback_Lobby_register_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Lobby_register(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        LobbyPrx proxy = LobbyPrx::uncheckedCast(result->getProxy());
        try
        {
            proxy->end_register(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)();
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Chat::Lobby::begin_register.
 */
template<class T> Callback_Lobby_registerPtr
newCallback_Lobby_register(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Lobby_register<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Chat::Lobby::begin_register.
 */
template<class T> Callback_Lobby_registerPtr
newCallback_Lobby_register(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Lobby_register<T>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Chat::Lobby::begin_register.
 */
template<class T> Callback_Lobby_registerPtr
newCallback_Lobby_register(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Lobby_register<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Chat::Lobby::begin_register.
 */
template<class T> Callback_Lobby_registerPtr
newCallback_Lobby_register(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Lobby_register<T>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::Chat::Lobby::begin_register.
 * Create a wrapper instance by calling ::Chat::newCallback_Lobby_register.
 */
template<class T, typename CT>
class Callback_Lobby_register : public Callback_Lobby_register_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Lobby_register(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        LobbyPrx proxy = LobbyPrx::uncheckedCast(result->getProxy());
        try
        {
            proxy->end_register(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Chat::Lobby::begin_register.
 */
template<class T, typename CT> Callback_Lobby_registerPtr
newCallback_Lobby_register(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Lobby_register<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Chat::Lobby::begin_register.
 */
template<class T, typename CT> Callback_Lobby_registerPtr
newCallback_Lobby_register(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Lobby_register<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Chat::Lobby::begin_register.
 */
template<class T, typename CT> Callback_Lobby_registerPtr
newCallback_Lobby_register(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Lobby_register<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Chat::Lobby::begin_register.
 */
template<class T, typename CT> Callback_Lobby_registerPtr
newCallback_Lobby_register(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Lobby_register<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::Chat::Lobby::begin_login.
 * Create a wrapper instance by calling ::Chat::newCallback_Lobby_login.
 */
template<class T>
class CallbackNC_Lobby_login : public Callback_Lobby_login_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Lobby_login(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        LobbyPrx proxy = LobbyPrx::uncheckedCast(result->getProxy());
        try
        {
            proxy->end_login(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)();
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Chat::Lobby::begin_login.
 */
template<class T> Callback_Lobby_loginPtr
newCallback_Lobby_login(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Lobby_login<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Chat::Lobby::begin_login.
 */
template<class T> Callback_Lobby_loginPtr
newCallback_Lobby_login(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Lobby_login<T>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Chat::Lobby::begin_login.
 */
template<class T> Callback_Lobby_loginPtr
newCallback_Lobby_login(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Lobby_login<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Chat::Lobby::begin_login.
 */
template<class T> Callback_Lobby_loginPtr
newCallback_Lobby_login(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Lobby_login<T>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::Chat::Lobby::begin_login.
 * Create a wrapper instance by calling ::Chat::newCallback_Lobby_login.
 */
template<class T, typename CT>
class Callback_Lobby_login : public Callback_Lobby_login_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Lobby_login(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        LobbyPrx proxy = LobbyPrx::uncheckedCast(result->getProxy());
        try
        {
            proxy->end_login(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Chat::Lobby::begin_login.
 */
template<class T, typename CT> Callback_Lobby_loginPtr
newCallback_Lobby_login(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Lobby_login<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Chat::Lobby::begin_login.
 */
template<class T, typename CT> Callback_Lobby_loginPtr
newCallback_Lobby_login(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Lobby_login<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Chat::Lobby::begin_login.
 */
template<class T, typename CT> Callback_Lobby_loginPtr
newCallback_Lobby_login(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Lobby_login<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Chat::Lobby::begin_login.
 */
template<class T, typename CT> Callback_Lobby_loginPtr
newCallback_Lobby_login(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Lobby_login<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::Chat::Lobby::begin_logout.
 * Create a wrapper instance by calling ::Chat::newCallback_Lobby_logout.
 */
template<class T>
class CallbackNC_Lobby_logout : public Callback_Lobby_logout_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Lobby_logout(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        LobbyPrx proxy = LobbyPrx::uncheckedCast(result->getProxy());
        try
        {
            proxy->end_logout(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)();
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Chat::Lobby::begin_logout.
 */
template<class T> Callback_Lobby_logoutPtr
newCallback_Lobby_logout(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Lobby_logout<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Chat::Lobby::begin_logout.
 */
template<class T> Callback_Lobby_logoutPtr
newCallback_Lobby_logout(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Lobby_logout<T>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Chat::Lobby::begin_logout.
 */
template<class T> Callback_Lobby_logoutPtr
newCallback_Lobby_logout(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Lobby_logout<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Chat::Lobby::begin_logout.
 */
template<class T> Callback_Lobby_logoutPtr
newCallback_Lobby_logout(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Lobby_logout<T>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::Chat::Lobby::begin_logout.
 * Create a wrapper instance by calling ::Chat::newCallback_Lobby_logout.
 */
template<class T, typename CT>
class Callback_Lobby_logout : public Callback_Lobby_logout_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Lobby_logout(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        LobbyPrx proxy = LobbyPrx::uncheckedCast(result->getProxy());
        try
        {
            proxy->end_logout(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Chat::Lobby::begin_logout.
 */
template<class T, typename CT> Callback_Lobby_logoutPtr
newCallback_Lobby_logout(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Lobby_logout<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Chat::Lobby::begin_logout.
 */
template<class T, typename CT> Callback_Lobby_logoutPtr
newCallback_Lobby_logout(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Lobby_logout<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Chat::Lobby::begin_logout.
 */
template<class T, typename CT> Callback_Lobby_logoutPtr
newCallback_Lobby_logout(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Lobby_logout<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Chat::Lobby::begin_logout.
 */
template<class T, typename CT> Callback_Lobby_logoutPtr
newCallback_Lobby_logout(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Lobby_logout<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::Chat::Lobby::begin_getRooms.
 * Create a wrapper instance by calling ::Chat::newCallback_Lobby_getRooms.
 */
template<class T>
class CallbackNC_Lobby_getRooms : public Callback_Lobby_getRooms_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const Rooms&);

    CallbackNC_Lobby_getRooms(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        LobbyPrx proxy = LobbyPrx::uncheckedCast(result->getProxy());
        Rooms ret;
        try
        {
            ret = proxy->end_getRooms(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret);
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Chat::Lobby::begin_getRooms.
 */
template<class T> Callback_Lobby_getRoomsPtr
newCallback_Lobby_getRooms(const IceUtil::Handle<T>& instance, void (T::*cb)(const Rooms&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Lobby_getRooms<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Chat::Lobby::begin_getRooms.
 */
template<class T> Callback_Lobby_getRoomsPtr
newCallback_Lobby_getRooms(T* instance, void (T::*cb)(const Rooms&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Lobby_getRooms<T>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::Chat::Lobby::begin_getRooms.
 * Create a wrapper instance by calling ::Chat::newCallback_Lobby_getRooms.
 */
template<class T, typename CT>
class Callback_Lobby_getRooms : public Callback_Lobby_getRooms_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const Rooms&, const CT&);

    Callback_Lobby_getRooms(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        LobbyPrx proxy = LobbyPrx::uncheckedCast(result->getProxy());
        Rooms ret;
        try
        {
            ret = proxy->end_getRooms(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Chat::Lobby::begin_getRooms.
 */
template<class T, typename CT> Callback_Lobby_getRoomsPtr
newCallback_Lobby_getRooms(const IceUtil::Handle<T>& instance, void (T::*cb)(const Rooms&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Lobby_getRooms<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Chat::Lobby::begin_getRooms.
 */
template<class T, typename CT> Callback_Lobby_getRoomsPtr
newCallback_Lobby_getRooms(T* instance, void (T::*cb)(const Rooms&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Lobby_getRooms<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::Chat::Lobby::begin_createRoom.
 * Create a wrapper instance by calling ::Chat::newCallback_Lobby_createRoom.
 */
template<class T>
class CallbackNC_Lobby_createRoom : public Callback_Lobby_createRoom_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const RoomPrx&);

    CallbackNC_Lobby_createRoom(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        LobbyPrx proxy = LobbyPrx::uncheckedCast(result->getProxy());
        RoomPrx ret;
        try
        {
            ret = proxy->end_createRoom(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret);
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Chat::Lobby::begin_createRoom.
 */
template<class T> Callback_Lobby_createRoomPtr
newCallback_Lobby_createRoom(const IceUtil::Handle<T>& instance, void (T::*cb)(const RoomPrx&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Lobby_createRoom<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Chat::Lobby::begin_createRoom.
 */
template<class T> Callback_Lobby_createRoomPtr
newCallback_Lobby_createRoom(T* instance, void (T::*cb)(const RoomPrx&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Lobby_createRoom<T>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::Chat::Lobby::begin_createRoom.
 * Create a wrapper instance by calling ::Chat::newCallback_Lobby_createRoom.
 */
template<class T, typename CT>
class Callback_Lobby_createRoom : public Callback_Lobby_createRoom_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const RoomPrx&, const CT&);

    Callback_Lobby_createRoom(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        LobbyPrx proxy = LobbyPrx::uncheckedCast(result->getProxy());
        RoomPrx ret;
        try
        {
            ret = proxy->end_createRoom(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Chat::Lobby::begin_createRoom.
 */
template<class T, typename CT> Callback_Lobby_createRoomPtr
newCallback_Lobby_createRoom(const IceUtil::Handle<T>& instance, void (T::*cb)(const RoomPrx&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Lobby_createRoom<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Chat::Lobby::begin_createRoom.
 */
template<class T, typename CT> Callback_Lobby_createRoomPtr
newCallback_Lobby_createRoom(T* instance, void (T::*cb)(const RoomPrx&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Lobby_createRoom<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::Chat::Lobby::begin_findRoom.
 * Create a wrapper instance by calling ::Chat::newCallback_Lobby_findRoom.
 */
template<class T>
class CallbackNC_Lobby_findRoom : public Callback_Lobby_findRoom_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const RoomPrx&);

    CallbackNC_Lobby_findRoom(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        LobbyPrx proxy = LobbyPrx::uncheckedCast(result->getProxy());
        RoomPrx ret;
        try
        {
            ret = proxy->end_findRoom(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret);
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Chat::Lobby::begin_findRoom.
 */
template<class T> Callback_Lobby_findRoomPtr
newCallback_Lobby_findRoom(const IceUtil::Handle<T>& instance, void (T::*cb)(const RoomPrx&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Lobby_findRoom<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Chat::Lobby::begin_findRoom.
 */
template<class T> Callback_Lobby_findRoomPtr
newCallback_Lobby_findRoom(T* instance, void (T::*cb)(const RoomPrx&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Lobby_findRoom<T>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::Chat::Lobby::begin_findRoom.
 * Create a wrapper instance by calling ::Chat::newCallback_Lobby_findRoom.
 */
template<class T, typename CT>
class Callback_Lobby_findRoom : public Callback_Lobby_findRoom_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const RoomPrx&, const CT&);

    Callback_Lobby_findRoom(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        LobbyPrx proxy = LobbyPrx::uncheckedCast(result->getProxy());
        RoomPrx ret;
        try
        {
            ret = proxy->end_findRoom(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Chat::Lobby::begin_findRoom.
 */
template<class T, typename CT> Callback_Lobby_findRoomPtr
newCallback_Lobby_findRoom(const IceUtil::Handle<T>& instance, void (T::*cb)(const RoomPrx&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Lobby_findRoom<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Chat::Lobby::begin_findRoom.
 */
template<class T, typename CT> Callback_Lobby_findRoomPtr
newCallback_Lobby_findRoom(T* instance, void (T::*cb)(const RoomPrx&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Lobby_findRoom<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::Chat::Lobby::begin_ListUsers.
 * Create a wrapper instance by calling ::Chat::newCallback_Lobby_ListUsers.
 */
template<class T>
class CallbackNC_Lobby_ListUsers : public Callback_Lobby_ListUsers_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const Users&);

    CallbackNC_Lobby_ListUsers(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        LobbyPrx proxy = LobbyPrx::uncheckedCast(result->getProxy());
        Users ret;
        try
        {
            ret = proxy->end_ListUsers(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret);
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Chat::Lobby::begin_ListUsers.
 */
template<class T> Callback_Lobby_ListUsersPtr
newCallback_Lobby_ListUsers(const IceUtil::Handle<T>& instance, void (T::*cb)(const Users&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Lobby_ListUsers<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Chat::Lobby::begin_ListUsers.
 */
template<class T> Callback_Lobby_ListUsersPtr
newCallback_Lobby_ListUsers(T* instance, void (T::*cb)(const Users&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Lobby_ListUsers<T>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::Chat::Lobby::begin_ListUsers.
 * Create a wrapper instance by calling ::Chat::newCallback_Lobby_ListUsers.
 */
template<class T, typename CT>
class Callback_Lobby_ListUsers : public Callback_Lobby_ListUsers_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const Users&, const CT&);

    Callback_Lobby_ListUsers(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        LobbyPrx proxy = LobbyPrx::uncheckedCast(result->getProxy());
        Users ret;
        try
        {
            ret = proxy->end_ListUsers(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Chat::Lobby::begin_ListUsers.
 */
template<class T, typename CT> Callback_Lobby_ListUsersPtr
newCallback_Lobby_ListUsers(const IceUtil::Handle<T>& instance, void (T::*cb)(const Users&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Lobby_ListUsers<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Chat::Lobby::begin_ListUsers.
 */
template<class T, typename CT> Callback_Lobby_ListUsersPtr
newCallback_Lobby_ListUsers(T* instance, void (T::*cb)(const Users&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Lobby_ListUsers<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::Chat::Lobby::begin_RegisterRoomFactory.
 * Create a wrapper instance by calling ::Chat::newCallback_Lobby_RegisterRoomFactory.
 */
template<class T>
class CallbackNC_Lobby_RegisterRoomFactory : public Callback_Lobby_RegisterRoomFactory_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Lobby_RegisterRoomFactory(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        LobbyPrx proxy = LobbyPrx::uncheckedCast(result->getProxy());
        try
        {
            proxy->end_RegisterRoomFactory(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)();
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Chat::Lobby::begin_RegisterRoomFactory.
 */
template<class T> Callback_Lobby_RegisterRoomFactoryPtr
newCallback_Lobby_RegisterRoomFactory(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Lobby_RegisterRoomFactory<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Chat::Lobby::begin_RegisterRoomFactory.
 */
template<class T> Callback_Lobby_RegisterRoomFactoryPtr
newCallback_Lobby_RegisterRoomFactory(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Lobby_RegisterRoomFactory<T>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Chat::Lobby::begin_RegisterRoomFactory.
 */
template<class T> Callback_Lobby_RegisterRoomFactoryPtr
newCallback_Lobby_RegisterRoomFactory(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Lobby_RegisterRoomFactory<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Chat::Lobby::begin_RegisterRoomFactory.
 */
template<class T> Callback_Lobby_RegisterRoomFactoryPtr
newCallback_Lobby_RegisterRoomFactory(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Lobby_RegisterRoomFactory<T>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::Chat::Lobby::begin_RegisterRoomFactory.
 * Create a wrapper instance by calling ::Chat::newCallback_Lobby_RegisterRoomFactory.
 */
template<class T, typename CT>
class Callback_Lobby_RegisterRoomFactory : public Callback_Lobby_RegisterRoomFactory_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Lobby_RegisterRoomFactory(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        LobbyPrx proxy = LobbyPrx::uncheckedCast(result->getProxy());
        try
        {
            proxy->end_RegisterRoomFactory(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Chat::Lobby::begin_RegisterRoomFactory.
 */
template<class T, typename CT> Callback_Lobby_RegisterRoomFactoryPtr
newCallback_Lobby_RegisterRoomFactory(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Lobby_RegisterRoomFactory<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Chat::Lobby::begin_RegisterRoomFactory.
 */
template<class T, typename CT> Callback_Lobby_RegisterRoomFactoryPtr
newCallback_Lobby_RegisterRoomFactory(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Lobby_RegisterRoomFactory<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Chat::Lobby::begin_RegisterRoomFactory.
 */
template<class T, typename CT> Callback_Lobby_RegisterRoomFactoryPtr
newCallback_Lobby_RegisterRoomFactory(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Lobby_RegisterRoomFactory<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Chat::Lobby::begin_RegisterRoomFactory.
 */
template<class T, typename CT> Callback_Lobby_RegisterRoomFactoryPtr
newCallback_Lobby_RegisterRoomFactory(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Lobby_RegisterRoomFactory<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::Chat::Lobby::begin_UnregisterRoomFactory.
 * Create a wrapper instance by calling ::Chat::newCallback_Lobby_UnregisterRoomFactory.
 */
template<class T>
class CallbackNC_Lobby_UnregisterRoomFactory : public Callback_Lobby_UnregisterRoomFactory_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Lobby_UnregisterRoomFactory(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        LobbyPrx proxy = LobbyPrx::uncheckedCast(result->getProxy());
        try
        {
            proxy->end_UnregisterRoomFactory(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)();
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Chat::Lobby::begin_UnregisterRoomFactory.
 */
template<class T> Callback_Lobby_UnregisterRoomFactoryPtr
newCallback_Lobby_UnregisterRoomFactory(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Lobby_UnregisterRoomFactory<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Chat::Lobby::begin_UnregisterRoomFactory.
 */
template<class T> Callback_Lobby_UnregisterRoomFactoryPtr
newCallback_Lobby_UnregisterRoomFactory(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Lobby_UnregisterRoomFactory<T>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Chat::Lobby::begin_UnregisterRoomFactory.
 */
template<class T> Callback_Lobby_UnregisterRoomFactoryPtr
newCallback_Lobby_UnregisterRoomFactory(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Lobby_UnregisterRoomFactory<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Chat::Lobby::begin_UnregisterRoomFactory.
 */
template<class T> Callback_Lobby_UnregisterRoomFactoryPtr
newCallback_Lobby_UnregisterRoomFactory(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Lobby_UnregisterRoomFactory<T>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::Chat::Lobby::begin_UnregisterRoomFactory.
 * Create a wrapper instance by calling ::Chat::newCallback_Lobby_UnregisterRoomFactory.
 */
template<class T, typename CT>
class Callback_Lobby_UnregisterRoomFactory : public Callback_Lobby_UnregisterRoomFactory_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Lobby_UnregisterRoomFactory(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        LobbyPrx proxy = LobbyPrx::uncheckedCast(result->getProxy());
        try
        {
            proxy->end_UnregisterRoomFactory(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Chat::Lobby::begin_UnregisterRoomFactory.
 */
template<class T, typename CT> Callback_Lobby_UnregisterRoomFactoryPtr
newCallback_Lobby_UnregisterRoomFactory(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Lobby_UnregisterRoomFactory<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Chat::Lobby::begin_UnregisterRoomFactory.
 */
template<class T, typename CT> Callback_Lobby_UnregisterRoomFactoryPtr
newCallback_Lobby_UnregisterRoomFactory(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Lobby_UnregisterRoomFactory<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Chat::Lobby::begin_UnregisterRoomFactory.
 */
template<class T, typename CT> Callback_Lobby_UnregisterRoomFactoryPtr
newCallback_Lobby_UnregisterRoomFactory(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Lobby_UnregisterRoomFactory<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Chat::Lobby::begin_UnregisterRoomFactory.
 */
template<class T, typename CT> Callback_Lobby_UnregisterRoomFactoryPtr
newCallback_Lobby_UnregisterRoomFactory(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Lobby_UnregisterRoomFactory<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::Chat::User::begin_sendMessage.
 * Create a wrapper instance by calling ::Chat::newCallback_User_sendMessage.
 */
template<class T>
class CallbackNC_User_sendMessage : public Callback_User_sendMessage_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_User_sendMessage(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Chat::User::begin_sendMessage.
 */
template<class T> Callback_User_sendMessagePtr
newCallback_User_sendMessage(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_User_sendMessage<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Chat::User::begin_sendMessage.
 */
template<class T> Callback_User_sendMessagePtr
newCallback_User_sendMessage(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_User_sendMessage<T>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Chat::User::begin_sendMessage.
 */
template<class T> Callback_User_sendMessagePtr
newCallback_User_sendMessage(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_User_sendMessage<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Chat::User::begin_sendMessage.
 */
template<class T> Callback_User_sendMessagePtr
newCallback_User_sendMessage(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_User_sendMessage<T>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::Chat::User::begin_sendMessage.
 * Create a wrapper instance by calling ::Chat::newCallback_User_sendMessage.
 */
template<class T, typename CT>
class Callback_User_sendMessage : public Callback_User_sendMessage_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_User_sendMessage(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Chat::User::begin_sendMessage.
 */
template<class T, typename CT> Callback_User_sendMessagePtr
newCallback_User_sendMessage(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_User_sendMessage<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Chat::User::begin_sendMessage.
 */
template<class T, typename CT> Callback_User_sendMessagePtr
newCallback_User_sendMessage(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_User_sendMessage<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Chat::User::begin_sendMessage.
 */
template<class T, typename CT> Callback_User_sendMessagePtr
newCallback_User_sendMessage(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_User_sendMessage<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Chat::User::begin_sendMessage.
 */
template<class T, typename CT> Callback_User_sendMessagePtr
newCallback_User_sendMessage(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_User_sendMessage<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::Chat::User::begin_sendPrivateMessage.
 * Create a wrapper instance by calling ::Chat::newCallback_User_sendPrivateMessage.
 */
template<class T>
class CallbackNC_User_sendPrivateMessage : public Callback_User_sendPrivateMessage_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_User_sendPrivateMessage(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Chat::User::begin_sendPrivateMessage.
 */
template<class T> Callback_User_sendPrivateMessagePtr
newCallback_User_sendPrivateMessage(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_User_sendPrivateMessage<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Chat::User::begin_sendPrivateMessage.
 */
template<class T> Callback_User_sendPrivateMessagePtr
newCallback_User_sendPrivateMessage(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_User_sendPrivateMessage<T>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Chat::User::begin_sendPrivateMessage.
 */
template<class T> Callback_User_sendPrivateMessagePtr
newCallback_User_sendPrivateMessage(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_User_sendPrivateMessage<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Chat::User::begin_sendPrivateMessage.
 */
template<class T> Callback_User_sendPrivateMessagePtr
newCallback_User_sendPrivateMessage(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_User_sendPrivateMessage<T>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::Chat::User::begin_sendPrivateMessage.
 * Create a wrapper instance by calling ::Chat::newCallback_User_sendPrivateMessage.
 */
template<class T, typename CT>
class Callback_User_sendPrivateMessage : public Callback_User_sendPrivateMessage_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_User_sendPrivateMessage(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Chat::User::begin_sendPrivateMessage.
 */
template<class T, typename CT> Callback_User_sendPrivateMessagePtr
newCallback_User_sendPrivateMessage(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_User_sendPrivateMessage<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Chat::User::begin_sendPrivateMessage.
 */
template<class T, typename CT> Callback_User_sendPrivateMessagePtr
newCallback_User_sendPrivateMessage(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_User_sendPrivateMessage<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Chat::User::begin_sendPrivateMessage.
 */
template<class T, typename CT> Callback_User_sendPrivateMessagePtr
newCallback_User_sendPrivateMessage(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_User_sendPrivateMessage<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Chat::User::begin_sendPrivateMessage.
 */
template<class T, typename CT> Callback_User_sendPrivateMessagePtr
newCallback_User_sendPrivateMessage(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_User_sendPrivateMessage<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::Chat::User::begin_getName.
 * Create a wrapper instance by calling ::Chat::newCallback_User_getName.
 */
template<class T>
class CallbackNC_User_getName : public Callback_User_getName_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::std::string&);

    CallbackNC_User_getName(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        UserPrx proxy = UserPrx::uncheckedCast(result->getProxy());
        ::std::string ret;
        try
        {
            ret = proxy->end_getName(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret);
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Chat::User::begin_getName.
 */
template<class T> Callback_User_getNamePtr
newCallback_User_getName(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::std::string&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_User_getName<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Chat::User::begin_getName.
 */
template<class T> Callback_User_getNamePtr
newCallback_User_getName(T* instance, void (T::*cb)(const ::std::string&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_User_getName<T>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::Chat::User::begin_getName.
 * Create a wrapper instance by calling ::Chat::newCallback_User_getName.
 */
template<class T, typename CT>
class Callback_User_getName : public Callback_User_getName_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::std::string&, const CT&);

    Callback_User_getName(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        UserPrx proxy = UserPrx::uncheckedCast(result->getProxy());
        ::std::string ret;
        try
        {
            ret = proxy->end_getName(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Chat::User::begin_getName.
 */
template<class T, typename CT> Callback_User_getNamePtr
newCallback_User_getName(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::std::string&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_User_getName<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Chat::User::begin_getName.
 */
template<class T, typename CT> Callback_User_getNamePtr
newCallback_User_getName(T* instance, void (T::*cb)(const ::std::string&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_User_getName<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::Chat::User::begin_getStatus.
 * Create a wrapper instance by calling ::Chat::newCallback_User_getStatus.
 */
template<class T>
class CallbackNC_User_getStatus : public Callback_User_getStatus_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(UserStatus);

    CallbackNC_User_getStatus(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        UserPrx proxy = UserPrx::uncheckedCast(result->getProxy());
        UserStatus ret;
        try
        {
            ret = proxy->end_getStatus(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret);
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Chat::User::begin_getStatus.
 */
template<class T> Callback_User_getStatusPtr
newCallback_User_getStatus(const IceUtil::Handle<T>& instance, void (T::*cb)(UserStatus), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_User_getStatus<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Chat::User::begin_getStatus.
 */
template<class T> Callback_User_getStatusPtr
newCallback_User_getStatus(T* instance, void (T::*cb)(UserStatus), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_User_getStatus<T>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::Chat::User::begin_getStatus.
 * Create a wrapper instance by calling ::Chat::newCallback_User_getStatus.
 */
template<class T, typename CT>
class Callback_User_getStatus : public Callback_User_getStatus_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(UserStatus, const CT&);

    Callback_User_getStatus(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        UserPrx proxy = UserPrx::uncheckedCast(result->getProxy());
        UserStatus ret;
        try
        {
            ret = proxy->end_getStatus(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Chat::User::begin_getStatus.
 */
template<class T, typename CT> Callback_User_getStatusPtr
newCallback_User_getStatus(const IceUtil::Handle<T>& instance, void (T::*cb)(UserStatus, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_User_getStatus<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Chat::User::begin_getStatus.
 */
template<class T, typename CT> Callback_User_getStatusPtr
newCallback_User_getStatus(T* instance, void (T::*cb)(UserStatus, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_User_getStatus<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::Chat::Room::begin_join.
 * Create a wrapper instance by calling ::Chat::newCallback_Room_join.
 */
template<class T>
class CallbackNC_Room_join : public Callback_Room_join_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Room_join(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Chat::Room::begin_join.
 */
template<class T> Callback_Room_joinPtr
newCallback_Room_join(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Room_join<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Chat::Room::begin_join.
 */
template<class T> Callback_Room_joinPtr
newCallback_Room_join(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Room_join<T>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Chat::Room::begin_join.
 */
template<class T> Callback_Room_joinPtr
newCallback_Room_join(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Room_join<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Chat::Room::begin_join.
 */
template<class T> Callback_Room_joinPtr
newCallback_Room_join(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Room_join<T>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::Chat::Room::begin_join.
 * Create a wrapper instance by calling ::Chat::newCallback_Room_join.
 */
template<class T, typename CT>
class Callback_Room_join : public Callback_Room_join_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Room_join(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Chat::Room::begin_join.
 */
template<class T, typename CT> Callback_Room_joinPtr
newCallback_Room_join(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Room_join<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Chat::Room::begin_join.
 */
template<class T, typename CT> Callback_Room_joinPtr
newCallback_Room_join(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Room_join<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Chat::Room::begin_join.
 */
template<class T, typename CT> Callback_Room_joinPtr
newCallback_Room_join(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Room_join<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Chat::Room::begin_join.
 */
template<class T, typename CT> Callback_Room_joinPtr
newCallback_Room_join(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Room_join<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::Chat::Room::begin_sendMessage.
 * Create a wrapper instance by calling ::Chat::newCallback_Room_sendMessage.
 */
template<class T>
class CallbackNC_Room_sendMessage : public Callback_Room_sendMessage_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Room_sendMessage(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Chat::Room::begin_sendMessage.
 */
template<class T> Callback_Room_sendMessagePtr
newCallback_Room_sendMessage(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Room_sendMessage<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Chat::Room::begin_sendMessage.
 */
template<class T> Callback_Room_sendMessagePtr
newCallback_Room_sendMessage(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Room_sendMessage<T>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Chat::Room::begin_sendMessage.
 */
template<class T> Callback_Room_sendMessagePtr
newCallback_Room_sendMessage(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Room_sendMessage<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Chat::Room::begin_sendMessage.
 */
template<class T> Callback_Room_sendMessagePtr
newCallback_Room_sendMessage(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Room_sendMessage<T>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::Chat::Room::begin_sendMessage.
 * Create a wrapper instance by calling ::Chat::newCallback_Room_sendMessage.
 */
template<class T, typename CT>
class Callback_Room_sendMessage : public Callback_Room_sendMessage_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Room_sendMessage(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Chat::Room::begin_sendMessage.
 */
template<class T, typename CT> Callback_Room_sendMessagePtr
newCallback_Room_sendMessage(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Room_sendMessage<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Chat::Room::begin_sendMessage.
 */
template<class T, typename CT> Callback_Room_sendMessagePtr
newCallback_Room_sendMessage(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Room_sendMessage<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Chat::Room::begin_sendMessage.
 */
template<class T, typename CT> Callback_Room_sendMessagePtr
newCallback_Room_sendMessage(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Room_sendMessage<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Chat::Room::begin_sendMessage.
 */
template<class T, typename CT> Callback_Room_sendMessagePtr
newCallback_Room_sendMessage(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Room_sendMessage<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::Chat::Room::begin_leave.
 * Create a wrapper instance by calling ::Chat::newCallback_Room_leave.
 */
template<class T>
class CallbackNC_Room_leave : public Callback_Room_leave_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Room_leave(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Chat::Room::begin_leave.
 */
template<class T> Callback_Room_leavePtr
newCallback_Room_leave(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Room_leave<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Chat::Room::begin_leave.
 */
template<class T> Callback_Room_leavePtr
newCallback_Room_leave(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Room_leave<T>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Chat::Room::begin_leave.
 */
template<class T> Callback_Room_leavePtr
newCallback_Room_leave(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Room_leave<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Chat::Room::begin_leave.
 */
template<class T> Callback_Room_leavePtr
newCallback_Room_leave(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Room_leave<T>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::Chat::Room::begin_leave.
 * Create a wrapper instance by calling ::Chat::newCallback_Room_leave.
 */
template<class T, typename CT>
class Callback_Room_leave : public Callback_Room_leave_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Room_leave(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Chat::Room::begin_leave.
 */
template<class T, typename CT> Callback_Room_leavePtr
newCallback_Room_leave(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Room_leave<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Chat::Room::begin_leave.
 */
template<class T, typename CT> Callback_Room_leavePtr
newCallback_Room_leave(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Room_leave<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Chat::Room::begin_leave.
 */
template<class T, typename CT> Callback_Room_leavePtr
newCallback_Room_leave(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Room_leave<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Chat::Room::begin_leave.
 */
template<class T, typename CT> Callback_Room_leavePtr
newCallback_Room_leave(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Room_leave<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::Chat::Room::begin_ListUsers.
 * Create a wrapper instance by calling ::Chat::newCallback_Room_ListUsers.
 */
template<class T>
class CallbackNC_Room_ListUsers : public Callback_Room_ListUsers_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const Users&);

    CallbackNC_Room_ListUsers(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        RoomPrx proxy = RoomPrx::uncheckedCast(result->getProxy());
        Users ret;
        try
        {
            ret = proxy->end_ListUsers(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret);
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Chat::Room::begin_ListUsers.
 */
template<class T> Callback_Room_ListUsersPtr
newCallback_Room_ListUsers(const IceUtil::Handle<T>& instance, void (T::*cb)(const Users&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Room_ListUsers<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Chat::Room::begin_ListUsers.
 */
template<class T> Callback_Room_ListUsersPtr
newCallback_Room_ListUsers(T* instance, void (T::*cb)(const Users&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Room_ListUsers<T>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::Chat::Room::begin_ListUsers.
 * Create a wrapper instance by calling ::Chat::newCallback_Room_ListUsers.
 */
template<class T, typename CT>
class Callback_Room_ListUsers : public Callback_Room_ListUsers_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const Users&, const CT&);

    Callback_Room_ListUsers(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        RoomPrx proxy = RoomPrx::uncheckedCast(result->getProxy());
        Users ret;
        try
        {
            ret = proxy->end_ListUsers(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Chat::Room::begin_ListUsers.
 */
template<class T, typename CT> Callback_Room_ListUsersPtr
newCallback_Room_ListUsers(const IceUtil::Handle<T>& instance, void (T::*cb)(const Users&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Room_ListUsers<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Chat::Room::begin_ListUsers.
 */
template<class T, typename CT> Callback_Room_ListUsersPtr
newCallback_Room_ListUsers(T* instance, void (T::*cb)(const Users&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Room_ListUsers<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::Chat::RoomFactory::begin_createRoom.
 * Create a wrapper instance by calling ::Chat::newCallback_RoomFactory_createRoom.
 */
template<class T>
class CallbackNC_RoomFactory_createRoom : public Callback_RoomFactory_createRoom_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const RoomPrx&);

    CallbackNC_RoomFactory_createRoom(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        RoomFactoryPrx proxy = RoomFactoryPrx::uncheckedCast(result->getProxy());
        RoomPrx ret;
        try
        {
            ret = proxy->end_createRoom(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret);
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Chat::RoomFactory::begin_createRoom.
 */
template<class T> Callback_RoomFactory_createRoomPtr
newCallback_RoomFactory_createRoom(const IceUtil::Handle<T>& instance, void (T::*cb)(const RoomPrx&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_RoomFactory_createRoom<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Chat::RoomFactory::begin_createRoom.
 */
template<class T> Callback_RoomFactory_createRoomPtr
newCallback_RoomFactory_createRoom(T* instance, void (T::*cb)(const RoomPrx&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_RoomFactory_createRoom<T>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::Chat::RoomFactory::begin_createRoom.
 * Create a wrapper instance by calling ::Chat::newCallback_RoomFactory_createRoom.
 */
template<class T, typename CT>
class Callback_RoomFactory_createRoom : public Callback_RoomFactory_createRoom_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const RoomPrx&, const CT&);

    Callback_RoomFactory_createRoom(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        RoomFactoryPrx proxy = RoomFactoryPrx::uncheckedCast(result->getProxy());
        RoomPrx ret;
        try
        {
            ret = proxy->end_createRoom(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Chat::RoomFactory::begin_createRoom.
 */
template<class T, typename CT> Callback_RoomFactory_createRoomPtr
newCallback_RoomFactory_createRoom(const IceUtil::Handle<T>& instance, void (T::*cb)(const RoomPrx&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_RoomFactory_createRoom<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Chat::RoomFactory::begin_createRoom.
 */
template<class T, typename CT> Callback_RoomFactory_createRoomPtr
newCallback_RoomFactory_createRoom(T* instance, void (T::*cb)(const RoomPrx&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_RoomFactory_createRoom<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::Chat::RoomFactory::begin_getServerLoad.
 * Create a wrapper instance by calling ::Chat::newCallback_RoomFactory_getServerLoad.
 */
template<class T>
class CallbackNC_RoomFactory_getServerLoad : public Callback_RoomFactory_getServerLoad_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Double);

    CallbackNC_RoomFactory_getServerLoad(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        RoomFactoryPrx proxy = RoomFactoryPrx::uncheckedCast(result->getProxy());
        ::Ice::Double ret;
        try
        {
            ret = proxy->end_getServerLoad(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret);
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Chat::RoomFactory::begin_getServerLoad.
 */
template<class T> Callback_RoomFactory_getServerLoadPtr
newCallback_RoomFactory_getServerLoad(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Double), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_RoomFactory_getServerLoad<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Chat::RoomFactory::begin_getServerLoad.
 */
template<class T> Callback_RoomFactory_getServerLoadPtr
newCallback_RoomFactory_getServerLoad(T* instance, void (T::*cb)(::Ice::Double), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_RoomFactory_getServerLoad<T>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::Chat::RoomFactory::begin_getServerLoad.
 * Create a wrapper instance by calling ::Chat::newCallback_RoomFactory_getServerLoad.
 */
template<class T, typename CT>
class Callback_RoomFactory_getServerLoad : public Callback_RoomFactory_getServerLoad_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Double, const CT&);

    Callback_RoomFactory_getServerLoad(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        RoomFactoryPrx proxy = RoomFactoryPrx::uncheckedCast(result->getProxy());
        ::Ice::Double ret;
        try
        {
            ret = proxy->end_getServerLoad(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Chat::RoomFactory::begin_getServerLoad.
 */
template<class T, typename CT> Callback_RoomFactory_getServerLoadPtr
newCallback_RoomFactory_getServerLoad(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Double, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_RoomFactory_getServerLoad<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Chat::RoomFactory::begin_getServerLoad.
 */
template<class T, typename CT> Callback_RoomFactory_getServerLoadPtr
newCallback_RoomFactory_getServerLoad(T* instance, void (T::*cb)(::Ice::Double, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_RoomFactory_getServerLoad<T, CT>(instance, cb, excb, sentcb);
}

}

#endif

#include <IceUtil/PopDisableWarnings.h>
#endif
